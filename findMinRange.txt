
*******************************************

$$--Overview--$$
This project contains a C++ implementation to find the minimal range that includes at least one element from each of the given k sorted lists.

File Descriptions -
findMinRange.h: Header file containing the declaration of the MinRangeFinder class.
findMinRange.cpp: Source file containing the implementation of the MinRangeFinder class.
main.cpp: Source file containing the main function to interactively take user inputs and find the minimal range.
testFindMinRange.cpp: Source file containing the test cases to verify the correctness of the MinRangeFinder class.

*******************************************

$$--Usage--$$

Compile the source files:

g++ -std=c++11 -o main main.cpp findMinRange.cpp
g++ -std=c++11 -o testFindMinRange testFindMinRange.cpp findMinRange.cpp


Run the main program:

./main


Run the test cases:

./testFindMinRange

*******************************************

$$--Description of MinRangeFinder Class--$$

Public Methods:

std::pair<int, int> findMinRange(const std::vector<std::vector<int>>& lists): Finds the minimal range that includes at least one element from each of the given k sorted lists.


Private Class:

Element: Represents an element in the heap, containing its value, the index of the list it belongs to, and its index within that list.


Private Members:

std::priority_queue<Element, std::vector<Element>, std::greater<Element>> minHeap: Min-heap to keep track of the minimum elements from each list.
int maxElement: Stores the current maximum element among the top elements of the min-heap.
int minRange: Stores the current minimum range found.
int start, end: Stores the start and end of the minimum range.